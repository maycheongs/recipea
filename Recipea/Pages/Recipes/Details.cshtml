@page "{id:int}"
@model Recipea.Pages.Recipes.DetailsModel
@{
    ViewData["Title"] = Model.Recipe.Title;
}

<div class="container-fluid p-4">
    <div class="row">
        <!-- Recipe Image -->
        <div class="col-md-3 mb-4">
            <img src="@(Model.Recipe.ImageUrl ?? "https://via.placeholder.com/300x300")" 
                 alt="@Model.Recipe.Title" 
                 class="img-fluid rounded shadow" 
                 style="width: 100%; object-fit: cover; max-height: 300px;" />
        </div>

        <!-- Recipe Info -->
        <div class="col-md-9">
            <h1 class="mb-3">@Model.Recipe.Title</h1>
            
            <!-- Source, Times -->
            <div class="mb-3 text-muted">
                @if (!string.IsNullOrEmpty(Model.Recipe.Source))
                {
                    <span class="me-3">
                        <strong>Source:</strong> @Model.Recipe.Source
                    </span>
                }
                @if (!string.IsNullOrEmpty(Model.Recipe.ActiveTime))
                {
                    <span class="me-3"><strong>Active Time:</strong> @Model.Recipe.ActiveTime</span>
                }
                @if (!string.IsNullOrEmpty(Model.Recipe.TotalTime))
                {
                    <span><strong>Total Time:</strong> @Model.Recipe.TotalTime</span>
                }
            </div>

            <!-- Description -->
            @if (!string.IsNullOrEmpty(Model.Recipe.Description))
            {
                <p class="lead">@Model.Recipe.Description</p>
            }

            <hr class="my-4" />

            <!-- Tabs for Ingredients and Instructions -->
            <ul class="nav nav-tabs" id="recipeTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="ingredients-tab" data-bs-toggle="tab" data-bs-target="#ingredients" type="button" role="tab">
                        <i class="bi bi-card-checklist me-2"></i>Ingredients
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="instructions-tab" data-bs-toggle="tab" data-bs-target="#instructions" type="button" role="tab">
                        <i class="bi bi-list-ol me-2"></i>Instructions
                    </button>
                </li>
            </ul>

            <div class="tab-content border border-top-0 p-4" id="recipeTabContent">
                <!-- Ingredients Tab -->
                <div class="tab-pane fade show active" id="ingredients" role="tabpanel">
                    @if (!string.IsNullOrEmpty(Model.Recipe.Ingredients))
                    {
                        <div id="ingredientsList">
                            @foreach (var ingredient in Model.Recipe.Ingredients.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                            {
                                var trimmed = ingredient.Trim();
                                @if (trimmed.StartsWith("[") && trimmed.EndsWith("]"))
                                {
                                    <!-- Subcategory heading -->
                                    <h6 class="mt-3 mb-2 text-success fw-bold">@trimmed.Trim('[', ']')</h6>
                                }
                                else
                                {
                                    <!-- Regular ingredient -->
                                    <div class="mb-2" data-original="@trimmed">
                                        <i class="bi bi-dot text-success"></i>
                                        <span class="ingredient-text">@trimmed</span>
                                    </div>
                                }
                            }
                        </div>
                        
                        <div class="mt-4">
                            <a href="javascript:void(0)" class="text-primary" id="scaleLink">
                                <small>1× scale (click to change)</small>
                            </a>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No ingredients listed.</p>
                    }
                </div>

                <!-- Instructions Tab -->
                <div class="tab-pane fade" id="instructions" role="tabpanel">
                    @if (!string.IsNullOrEmpty(Model.Recipe.Instructions))
                    {
                        var instructions = Model.Recipe.Instructions.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                        bool inList = false;
                        
                        foreach (var instruction in instructions)
                        {
                            var trimmed = instruction.Trim();
                            if (trimmed.StartsWith("[") && trimmed.EndsWith("]"))
                            {
                                if (inList)
                                {
                                    @:</ol>
                                    inList = false;
                                }
                                @:<!-- Subcategory heading -->
                                <h6 class="mt-3 mb-2 text-success fw-bold">@trimmed.Trim('[', ']')</h6>
                            }
                            else
                            {
                                if (!inList)
                                {
                                    @:<ol class="instructions-list">
                                    inList = true;
                                }
                                <li class="mb-3">@trimmed</li>
                            }
                        }
                        
                        if (inList)
                        {
                            @:</ol>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No instructions provided.</p>
                    }
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="mt-4">
                <a asp-page="./Edit" asp-route-id="@Model.Recipe.Id" class="btn btn-warning me-2">
                    <i class="bi bi-pencil me-1"></i>Edit
                </a>
                <a asp-page="./Delete" asp-route-id="@Model.Recipe.Id" class="btn btn-danger me-2">
                    <i class="bi bi-trash me-1"></i>Delete
                </a>
                <a asp-page="./Index" class="btn btn-secondary">
                    <i class="bi bi-arrow-left me-1"></i>Back to List
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentScale = 1;
        const scales = [0.5, 1, 2, 3];
        
        // Convert fractions to decimals
        function fractionToDecimal(fraction) {
            const fractionMap = {
                '¼': 0.25, '½': 0.5, '¾': 0.75,
                '⅓': 0.333, '⅔': 0.667,
                '⅛': 0.125, '⅜': 0.375, '⅝': 0.625, '⅞': 0.875,
                '1/4': 0.25, '1/2': 0.5, '3/4': 0.75,
                '1/3': 0.333, '2/3': 0.667,
                '1/8': 0.125, '3/8': 0.375, '5/8': 0.625, '7/8': 0.875
            };
            return fractionMap[fraction] || null;
        }
        
        // Convert decimal to mixed number/fraction
        function decimalToFraction(decimal) {
            const whole = Math.floor(decimal);
            const remainder = decimal - whole;
            
            // Common fractions
            const fractions = [
                [0.125, '⅛'], [0.25, '¼'], [0.333, '⅓'], [0.375, '⅜'],
                [0.5, '½'], [0.625, '⅝'], [0.667, '⅔'], [0.75, '¾'], [0.875, '⅞']
            ];
            
            for (let [val, frac] of fractions) {
                if (Math.abs(remainder - val) < 0.01) {
                    return whole > 0 ? `${whole} ${frac}` : frac;
                }
            }
            
            // Round to 2 decimal places if no fraction match
            return decimal.toFixed(2).replace(/\.?0+$/, '');
        }
        
        function scaleIngredient(text, scale) {
            // Skip if no quantity is detected
            if (!/\d/.test(text)) {
                return text;
            }
            
            // Match numbers (including decimals and fractions) with optional following space
            const regex = /(\d+\.?\d*)\s*([¼½¾⅓⅔⅛⅜⅝⅞])?(\s+)/g;
            
            return text.replace(regex, function(match, number, fraction, whitespace) {
                let value = parseFloat(number);
                
                // Add fraction if present
                if (fraction) {
                    value += fractionToDecimal(fraction) || 0;
                }
                
                // Scale the value
                const scaled = value * scale;
                
                // Convert back to fraction format and preserve whitespace
                return decimalToFraction(scaled) + (whitespace || ' ');
            });
        }
        
        document.getElementById('scaleLink')?.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Cycle through scales
            const currentIndex = scales.indexOf(currentScale);
            const nextIndex = (currentIndex + 1) % scales.length;
            currentScale = scales[nextIndex];
            
            // Update link text
            this.querySelector('small').textContent = `${currentScale}× scale (click to change)`;
            
            // Scale all ingredients
            const ingredients = document.querySelectorAll('#ingredientsList div[data-original]');
            ingredients.forEach(div => {
                const original = div.getAttribute('data-original');
                const span = div.querySelector('.ingredient-text');
                if (original && span) {
                    span.textContent = scaleIngredient(original, currentScale);
                }
            });
        });
    </script>
}
